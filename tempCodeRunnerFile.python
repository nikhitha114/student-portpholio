import socket
import os
import time
import struct
import select
ICMP_ECHO_REQUEST = 8  # Echo Request (ping)
ICMP_ECHO_REPLY = 0  # Echo Reply
ICMP_TIMEOUT = 2  # Timeout for waiting for the response (in seconds)
MAX_HOPS = 30  # Maximum hops (TTL)
def checksum(data):
    total = 0
    for i in range(0, len(data), 2):
        total += (data[i] << 8) + (data[i + 1])
    total = (total & 0xFFFF) + (total >> 16)
    total = ~total & 0xFFFF
    return total
def create_packet(id):
    header = struct.pack("bbHHh", ICMP_ECHO_REQUEST, 0, 0, id, 1)
    data = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi"  # Arbitrary data for testing
    checksum_value = checksum(header + data)
    header = struct.pack("bbHHh", ICMP_ECHO_REQUEST, 0, checksum_value, id, 1)
    return header + data
def traceroute(destination):
    dest_ip = socket.gethostbyname(destination)
    print(f"Traceroute to {destination} ({dest_ip}), maximum {MAX_HOPS} hops:\n")

    for ttl in range(1, MAX_HOPS + 1):
        
        send_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
        send_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 2048)
        send_socket.setsockopt(socket.IPPROTO_IP, socket.IP_TTL, ttl)
        
        receive_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
        receive_socket.settimeout(ICMP_TIMEOUT)
        packet_id = os.getpid() & 0xFFFF
        packet = create_packet(packet_id)
        
        send_socket.sendto(packet, (dest_ip, 0))
        start_time = time.time()
        received = False
        try:
            while True:
                elapsed_time = time.time() - start_time
                if elapsed_time > ICMP_TIMEOUT:
                    break
                ready = select.select([receive_socket], [], [], 1)
                if ready[0]:
                    data, addr = receive_socket.recvfrom(1024)
                    recv_ip = addr[0]
                    if recv_ip == dest_ip:
                        print(f"{ttl}  {recv_ip}  {elapsed_time * 1000:.2f} ms")
                        received = True
                        break
                    else:
                        print(f"{ttl}  {recv_ip}  {elapsed_time * 1000:.2f} ms")
                        received = True
                        break
        except socket.timeout:
            print(f"{ttl}  * * * Request timed out.")
        
        if received:
            if recv_ip == dest_ip:
                print(f"Destination reached in {ttl} hops.")
                break
        send_socket.close()
        receive_socket.close()

destination = input("Enter the domain or IP address to trace: ")
traceroute(destination)
